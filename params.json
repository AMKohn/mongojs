{"name":"Mongojs","tagline":"Node.js module that implements the offical mongo api","body":"# mongojs\r\n\r\nA [node.js](http://nodejs.org) module for mongodb, that emulates [the official mongodb API](http://www.mongodb.org/display/DOCS/Home) as much as possible.\r\nIt wraps [mongodb-native](https://github.com/mongodb/node-mongodb-native/) and is available through [npm](http://npmjs.org)\r\n\r\n\tnpm install mongojs\r\n\r\n[![build status](https://secure.travis-ci.org/mafintosh/mongojs.png)](http://travis-ci.org/mafintosh/mongojs)\r\n\r\n## Usage\r\n\r\nmongojs is easy to use:\r\n\r\n``` js\r\nvar mongojs = require('mongojs');\r\nvar db = mongojs(connectionString, [collections]);\r\n```\r\n\r\nThe connection string should follow the format desribed in [the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\r\nSome examples of this could be:\r\n\r\n``` js\r\n// simple usage for a local db\r\nvar db = mongojs('mydb', ['mycollection']);\r\n\r\n// the db is on a remote server (the port default to mongo)\r\nvar db = mongojs('example.com/mydb', ['mycollection']);\r\n\r\n// we can also provide some credentials\r\nvar db = mongojs('username:password@example.com/mydb', ['mycollection']);\r\n\r\n// connect now, and worry about collections later\r\nvar db = mongojs('mydb');\r\nvar mycollection = db.collection('mycollection');\r\n```\r\n\r\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that we use a callback.\r\nThe format for callbacks is always `callback(error, value)` where error is null if no exception has occured. The update methods `save`, `remove`, `update` and `findAndModify` also pass the `lastErrorObject` as the last argument to the callback function.\r\n\r\n``` js\r\n// find everything\r\ndb.mycollection.find(function(err, docs) {\r\n\t// docs is an array of all the documents in mycollection\r\n});\r\n\r\n// find everything, but sort by name\r\ndb.mycollection.find().sort({name:1}, function(err, docs) {\r\n\t// docs is now a sorted array\r\n});\r\n\r\n// iterate over all whose level is greater than 90.\r\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\r\n\tif (!doc) {\r\n\t\t// we visited all docs in the collection\r\n\t\treturn;\r\n\t}\r\n\t// doc is a document in the collection\r\n});\r\n\r\n// find a document using a native ObjectId\r\ndb.mycollection.findOne({\r\n\t_id:mongojs.ObjectId('523209c4561c640000000001')\r\n}, function(err, doc) {\r\n\t// doc._id.toString() === '523209c4561c640000000001'\r\n});\r\n\r\n// find all named 'mathias' and increment their level\r\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true}, function() {\r\n\t// the update is complete\r\n});\r\n\r\n// find one named 'mathias', tag him as a contributor and return the modified doc\r\ndb.mycollection.findAndModify({\r\n\tquery: { name: 'mathias' },\r\n\tupdate: { $set: { tag:'maintainer' } },\r\n\tnew: true\r\n}, function(err, doc, lastErrorObject) {\r\n\t// doc.tag === 'maintainer'\r\n});\r\n\r\n\r\n// use the save function to just save a document (callback is optional for all writes)\r\ndb.mycollection.save({created:'just now'});\r\n\r\n```\r\n\r\nIf you provide a callback to `find` or any cursor config operation mongojs will call `toArray` for you\r\n\r\n``` js\r\ndb.mycollection.find({}, function(err, docs) { ... });\r\n\r\ndb.mycollection.find({}).limit(2).skip(1, function(err, docs) { ... });\r\n```\r\nis the same as\r\n\r\n``` js\r\ndb.mycollection.find({}).toArray(function(err, docs) { ... });\r\n\r\ndb.mycollection.find({}).limit(2).skip(1).toArray(function(err, docs) { ... });\r\n```\r\n\r\nFor more detailed information about the different usages of update and quering see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\r\n\r\n## Streaming cursors\r\n\r\nAs of `0.7.0` all cursors are a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream) of objects.\r\n\r\n``` js\r\nvar JSONStream = require('JSONStream');\r\n\r\n// pipe all documents in mycollection to stdout\r\ndb.mycollection.find({}).pipe(JSONStream.stringify()).pipe(process.stdout);\r\n```\r\n\r\nNotice that you should pipe the cursor through a stringifier (like [JSONStream](https://github.com/dominictarr/JSONStream))\r\nif you want to pipe it to a serial stream like a http response.\r\n\r\n## Tailable cursors\r\n\r\nIf you are using a capped collection you can create a [tailable cursor](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/) to that collection by adding `tailable:true` to the find options\r\n\r\n``` js\r\nvar cursor = db.mycollection.find({}, {}, {tailable:true, timeout:false});\r\n\r\n// since all cursors are streams we can just listen for data\r\ncursor.on('data', function(doc) {\r\n\tconsole.log('new document', doc);\r\n});\r\n```\r\n\r\nNote that you need to explicitly set the selection parameter in the `find` call.\r\n\r\n## Database commands\r\n\r\nWith mongojs you can run database commands just like with the mongo shell using `db.runCommand()`\r\n\r\n```js\r\ndb.runCommand({ping:1}, function(err, res) {\r\n\tif(!err && res.ok) console.log(\"we're up\");\r\n});\r\n```\r\n\r\nor `db.collection.runCommand()`\r\n\r\n```js\r\ndb.things.runCommand('count', function(err, res) {\r\n\tconsole.log(res);\r\n});\r\n```\r\n\r\n## Replication Sets\r\n\r\nMongojs can also connect to a mongo replication set by providing a connection string with multiple hosts\r\n\r\n``` js\r\nvar db = mongojs('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection']);\r\n```\r\n\r\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\r\n\r\n## Using harmony features\r\n\r\nIf you run node.js with the `--harmony` option, then you can ommit the collection names array, and you can do stuff like.\r\n\r\n```js\r\nvar mongojs = require('mongojs');\r\nvar db = require('mydb');\r\n\r\ndb.hackers.insert({name: 'Ed'});\r\n```\r\n\r\nIn the above example the `hackers` collection is enabled automagically (similar to the shell) using the `Proxy` feature in harmony\r\n\r\n# API\r\n\r\nThis API documentation is a work in progress.\r\n\r\n#### Collection\r\n\r\n#####`db.collection.aggregate([pipeline], [callback])`\r\n\r\n#####`db.collection.count([query], callback)`\r\n\r\n#####`db.collection.createIndex(keys, options, [callback])`\r\n\r\n#####`db.collection.distinct(field, query, callback)`\r\n\r\n#####`db.collection.drop([callback])`\r\n\r\n#####`db.collection.dropIndex(index, [callback])`\r\n\r\n#####`db.collection.dropIndexes([callback])`\r\n\r\n#####`db.collection.ensureIndex(keys, options, [callback])`\r\n\r\n#####`db.collection.find([criteria], [projection], [callback])`\r\n\r\nThis function applies a query to a collection. You can get the return value, which is a cursor, or pass a callback\r\nas the last parameter. Said callback receives `(err, documents)`\r\n\r\n#####`db.collection.findOne([criteria], [projection], callback)`\r\n\r\nApply a query and get one single document passed as a callback. The callback receives `(err, document)`\r\n\r\n#####`db.collection.findAndModify(document, callback)`\r\n\r\n#####`db.collection.getIndexes(callback)`\r\n\r\n#####`db.collection.group(document, callback)`\r\n\r\n#####`db.collection.insert(docOrDocs, [callback])`\r\n\r\n#####`db.collection.isCapped(callback)`\r\n\r\n#####`db.collection.mapReduce(map, reduce, options, [callback])`\r\n\r\n#####`db.collection.reIndex([callback])`\r\n\r\n#####`db.collection.remove(query, [justOne], [callback])`\r\n\r\n#####`db.collection.runCommand(command, [callback])`\r\n\r\n#####`db.collection.save(doc, [callback])`\r\n\r\n#####`db.collection.stats(callback)`\r\n\r\n#####`db.collection.update(query, update, [options], [callback])`\r\n\r\n#### Cursor\r\n\r\n#####`cursor.batchSize(size, [callback])`\r\n\r\n#####`cursor.count(callback)`\r\n\r\n#####`cursor.explain(callback)`\r\n\r\n#####`cursor.forEach(function)`\r\n\r\n#####`cursor.limit(n, [callback])`\r\n\r\n#####`cursor.map(function, [callback])`\r\n\r\n#####`cursor.next(callback)`\r\n\r\n#####`cursor.skip(n, [callback])`\r\n\r\n#####`cursor.sort(sortOptions, [callback])`\r\n\r\n#####`cursor.toArray(callback)`\r\n\r\n#### Database\r\n\r\n#####`db.addUser(document)`\r\n\r\n#####`db.createCollection(name, options, [callback])`\r\n\r\n#####`db.dropDatabase([callback])`\r\n\r\n#####`db.eval(code, [params], [options], [callback])`\r\n\r\n#####`db.getCollectionNames([callback])`\r\n\r\n#####`db.getLastError(callback)`\r\n\r\n#####`db.getLastErrorObj(callback)`\r\n\r\n#####`db.removeUser(username, [callback])`\r\n\r\n#####`db.runCommand(command, [callback])`\r\n\r\n#####`db.stats([callback])`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}